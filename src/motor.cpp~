#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/UInt32MultiArray.h>
#include "std_msgs/String.h"
#include <iostream>

using namespace std;

float pi = 3.1415;
float L = 0.171; //distance between wheels
ros::NodeHandle n;
ros::Publisher pub = n.advertise<std_msgs::UInt32MultiArray>("pwm", 10);

void MotorControl(const geometry_msgs::Twist& twist)
{
  int gain = 4000;
  float left_wheel_data = gain*(twist.linear.x - twist.angular.z);
  float right_wheel_data = gain*(twist.linear.x + twist.angular.z);

  std_msgs::UInt32MultiArray pwm;
  pwm.data[0] = (int) left_wheel_data;
  pwm.data[1] = (int) right_wheel_data;
  pub.publish(pwm);

  if(left_wheel_data >= 0)
  {
    cout<<"Left Forward:"<<left_wheel_data;
  }
  else
  {
    cout<<"Left Back:"<<left_wheel_data;
  }
  if(right_wheel_data >= 0)
  {
    cout<<"Right Forward:"<<right_wheel_data;
  }
  else
  {
    cout<<"Right Back:"<<right_wheel_data;
  }
  cout<<endl;
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "motor");  
  ros::Subscriber sub =  n.subscribe("cmd_vel", 10, MotorControl);
  ros::spin();
  return 0;
}
